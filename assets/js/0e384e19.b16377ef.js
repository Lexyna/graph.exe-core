"use strict";(self.webpackChunkgraph_exe=self.webpackChunkgraph_exe||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,f=d["".concat(p,".").concat(h)]||d[h]||u[h]||r;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1,slug:"/"},i="Graph.exe",c={unversionedId:"intro",id:"intro",title:"Graph.exe",description:"What is Graph.exe?",source:"@site/docs/intro.md",sourceDirName:".",slug:"/",permalink:"/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"React Plugin",permalink:"/category/react-plugin"}},p={},l=[{value:"What is Graph.exe?",id:"what-is-graphexe",level:2},{value:"How does it work?",id:"how-does-it-work",level:2},{value:"What can I use graph.exe for?",id:"what-can-i-use-graphexe-for",level:2},{value:"Do I need to use React if I want to use graph.exe?",id:"do-i-need-to-use-react-if-i-want-to-use-graphexe",level:2}],s={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"graphexe"},"Graph.exe"),(0,o.kt)("h2",{id:"what-is-graphexe"},"What is Graph.exe?"),(0,o.kt)("p",null,"Graph.exe is a modular npm package, written completely in typescript aimed at creating executable Graph. It consists of multiple packages that, all packages are building upon the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Lexyna/graph.exe-core"},(0,o.kt)("inlineCode",{parentName:"a"},"graph.exe-core"))," package."),(0,o.kt)("p",null,"The core package provides the main functionality of execution, creating and deleting a graph. It all so comes with some other ",(0,o.kt)("a",{parentName:"p",href:"/Documentation/functions#utility-functions"},(0,o.kt)("inlineCode",{parentName:"a"},"utilities functions"))," to connect nodes, build nodes etc. "),(0,o.kt)("p",null,"Other packages provide a basic userInterface ",(0,o.kt)("inlineCode",{parentName:"p"},"NodeEditor")," Component that can be used and configured for their respective frameworks (currently only react)."),(0,o.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,o.kt)("p",null,"Each Graph gets its own ",(0,o.kt)("inlineCode",{parentName:"p"},"configuration"),", usually consisting of an ",(0,o.kt)("inlineCode",{parentName:"p"},"entryId"),", ",(0,o.kt)("a",{parentName:"p",href:"/Documentation/NodeTypes#confognodedict"},(0,o.kt)("inlineCode",{parentName:"a"},"ConfigNodeDict")),", ",(0,o.kt)("a",{parentName:"p",href:"/Documentation/NodeTypes#enginenodedict"},(0,o.kt)("inlineCode",{parentName:"a"},"EngineNodeDict")),", as well as ",(0,o.kt)("a",{parentName:"p",href:"/Documentation/connectionTypes#engineconnections"},(0,o.kt)("inlineCode",{parentName:"a"},"EngineConnections")),"."),(0,o.kt)("p",null,"Together, they specify a graph. Each connection between nodes is documented ",(0,o.kt)("a",{parentName:"p",href:"/Documentation/connectionTypes#engineconnections"},(0,o.kt)("inlineCode",{parentName:"a"},"EngineConnections"))," Object. At runtime, the engine will start at the ",(0,o.kt)("inlineCode",{parentName:"p"},"entryId")," and, resolve all dependencies (ingoing connections) before calling the defined ",(0,o.kt)("inlineCode",{parentName:"p"},"executable")," function in the ",(0,o.kt)("a",{parentName:"p",href:"/Documentation/NodeTypes#confignode"},(0,o.kt)("inlineCode",{parentName:"a"},"ConfigNode"))," related to the ",(0,o.kt)("a",{parentName:"p",href:"/Documentation/NodeTypes#enginenode"},(0,o.kt)("inlineCode",{parentName:"a"},"EngineNode")),"."),(0,o.kt)("p",null,"To call another nodes, a special function ",(0,o.kt)("a",{parentName:"p",href:"/Documentation/functions#next"},(0,o.kt)("inlineCode",{parentName:"a"},"next()"))," exists. This function can be placed inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"executable")," function of a node and will trigger all connected nodes (in no specific order)."),(0,o.kt)("h2",{id:"what-can-i-use-graphexe-for"},"What can I use graph.exe for?"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"graph.exe")," was designed to work with as many use cases a possible. Because each node contains their own callable function there is no limit to what is possible. Some other nodeEditor's don't allow for a simple way to create a control flow, e.g. from one node to another, while other might not even have an in build control flow making it difficult to resolve dependencies. ",(0,o.kt)("inlineCode",{parentName:"p"},"graph.exe")," takes care of all of that. Some examples of what is possible can be found on the ",(0,o.kt)("a",{parentName:"p",href:"/Showcase"},(0,o.kt)("inlineCode",{parentName:"a"},"Showcase"))," page. "),(0,o.kt)("h2",{id:"do-i-need-to-use-react-if-i-want-to-use-graphexe"},"Do I need to use React if I want to use graph.exe?"),(0,o.kt)("p",null,"No, the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Lexyna/graph.exe-core"},(0,o.kt)("inlineCode",{parentName:"a"},"core"))," package has no dependencies at all, you can run it anywhere you can run javascript. The only caveat is that is has no user-interface by default. However you could easily build you own ontop of the core package using your preferred framework (or none at all). You can also take a look at the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Lexyna/graph.exe-react"},(0,o.kt)("inlineCode",{parentName:"a"},"react-plugin"))," github page to get an idea of how to get started."))}u.isMDXComponent=!0}}]);