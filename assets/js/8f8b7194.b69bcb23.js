"use strict";(self.webpackChunkgraph_exe=self.webpackChunkgraph_exe||[]).push([[822],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,N=u["".concat(c,".").concat(m)]||u[m]||s[m]||i;return t?o.createElement(N,r(r({ref:n},d),{},{components:t})):o.createElement(N,r({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=u;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,r[1]=p;for(var l=2;l<i;l++)r[l]=t[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},391:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>s,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const i={},r="IO & connection types",p={unversionedId:"Documentation/connectionTypes",id:"Documentation/connectionTypes",title:"IO & connection types",description:"EngineIO:",source:"@site/docs/Documentation/connectionTypes.md",sourceDirName:"Documentation",slug:"/Documentation/connectionTypes",permalink:"/graph.exe-core/Documentation/connectionTypes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Documentation/connectionTypes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NodeTypes",permalink:"/graph.exe-core/Documentation/NodeTypes"}},c={},l=[{value:"<code>EngineIO&lt;K, T&gt;</code>:",id:"engineiok-t",level:2},{value:"<code>connectionDetails</code>:",id:"connectiondetails",level:2},{value:"<code>EngineConnections</code>:",id:"engineconnections",level:2},{value:"<code>IngoingConnections</code>:",id:"ingoingconnections",level:2},{value:"<code>OutgoingConnections</code>:",id:"outgoingconnections",level:2},{value:"<code>IoIdInfo</code>:",id:"ioidinfo",level:2},{value:"<code>NodePorts</code>:",id:"nodeports",level:2},{value:"<code>CONNECTION_TYPE</code>:",id:"connection_type",level:2},{value:"<code>CON_MAPPING</code>:",id:"con_mapping",level:2}],d={toc:l};function s(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"io--connection-types"},"IO & connection types"),(0,a.kt)("h2",{id:"engineiok-t"},(0,a.kt)("inlineCode",{parentName:"h2"},"EngineIO<K, T>"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface EngineIO<K, T> {\n    type: string;\n    mapping: CON_MAPPING;\n    data: K;\n    value: T;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"type"),": Defines the type of this ",(0,a.kt)("a",{parentName:"p",href:"#engineio"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineIO")),". Can only be connected to other ",(0,a.kt)("a",{parentName:"p",href:"#engineio"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineIO")),"'s with the same type."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mapping"),": The ",(0,a.kt)("a",{parentName:"p",href:"#con_mapping"},(0,a.kt)("inlineCode",{parentName:"a"},"CON_MAPPING"))," of this node, defines how many connections this node can have."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"data:")," User defined additional data for for this IO Port. Can be used, for example, to render debug information."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"value:")," User defined value that will be send to other nodes."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," should be serializable!")),(0,a.kt)("h2",{id:"connectiondetails"},(0,a.kt)("inlineCode",{parentName:"h2"},"connectionDetails"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface ConnectionDetails {\n    ioId: string;\n    nodeId: string;\n    type: CONNECTION_TYPE;\n    index: number;\n}\n")),(0,a.kt)("p",null,"Details defining a ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/NodeTypes#enginenode"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineNode")),"'s ",(0,a.kt)("a",{parentName:"p",href:"#engineio"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineIO")),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ioId"),": Full id of the nodes's io Port. Composited: ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeID")," + ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," + ",(0,a.kt)("inlineCode",{parentName:"p"},"index"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"nodeId"),": Id of the ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/NodeTypes#enginenode"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineNode"))," this IO Port belongs to."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"type"),": The ",(0,a.kt)("a",{parentName:"p",href:"#connection_type"},(0,a.kt)("inlineCode",{parentName:"a"},"CONNECTION_TYPE"))," of this IO Port."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"index"),": The index at which this IO port can be found."),(0,a.kt)("h2",{id:"engineconnections"},(0,a.kt)("inlineCode",{parentName:"h2"},"EngineConnections"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface EngineConnections {\n    input: IngoingConnections;\n    output: OutgoingConnections;\n}\n")),(0,a.kt)("p",null,"Used by ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/functions#connector"},(0,a.kt)("inlineCode",{parentName:"a"},"connector()")),", ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/functions#splitter"},(0,a.kt)("inlineCode",{parentName:"a"},"splitter")),",",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/functions#connectionfinder"},(0,a.kt)("inlineCode",{parentName:"a"},"connectionFinder")),", ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/functions#executegraph"},(0,a.kt)("inlineCode",{parentName:"a"},"executeGraph"))," and ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/functions#creategraph"},(0,a.kt)("inlineCode",{parentName:"a"},"createGraph")),"."),(0,a.kt)("p",null,"Can be initialized like so and used with ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/functions#connector"},(0,a.kt)("inlineCode",{parentName:"a"},"connector"))," to create connections:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const connectionDict: EngineConnections = {\n    input: {},\n    output: {}\n}\n")),(0,a.kt)("h2",{id:"ingoingconnections"},(0,a.kt)("inlineCode",{parentName:"h2"},"IngoingConnections"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface IngoingConnections {\n    [k: string]: IoIdInfo\n}\n")),(0,a.kt)("h2",{id:"outgoingconnections"},(0,a.kt)("inlineCode",{parentName:"h2"},"OutgoingConnections"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface OutgoingConnections {\n    [k: string]: IoIdInfo\n}\n\n")),(0,a.kt)("h2",{id:"ioidinfo"},(0,a.kt)("inlineCode",{parentName:"h2"},"IoIdInfo"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface IoIdInfo {\n    self: ConnectionDetails;\n    connections: ConnectionDetails[];\n}\n")),(0,a.kt)("p",null,"Used by ",(0,a.kt)("inlineCode",{parentName:"p"},"IngoingConnections")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"OutgoingConnections"),"."),(0,a.kt)("h2",{id:"nodeports"},(0,a.kt)("inlineCode",{parentName:"h2"},"NodePorts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface NodePorts {\n    nodeId: string,\n    inputs: ConnectionDetails[],\n    outputs: ConnectionDetails[],\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"nodeId"),": ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/NodeTypes#enginenode"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineNode"))," id."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"input"),": Array of ",(0,a.kt)("a",{parentName:"p",href:"#connectiondetails"},(0,a.kt)("inlineCode",{parentName:"a"},"ConnectionDetails"))," for all incoming connection to this ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/NodeTypes#enginenode"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineNode")),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"output"),": Array of ",(0,a.kt)("a",{parentName:"p",href:"#connectiondetails"},(0,a.kt)("inlineCode",{parentName:"a"},"ConnectionDetails"))," for all outgoing connection from this ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/NodeTypes#enginenode"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineNode")),"."),(0,a.kt)("h2",{id:"connection_type"},(0,a.kt)("inlineCode",{parentName:"h2"},"CONNECTION_TYPE"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'enum CONNECTION_TYPE {\n    INPUT = "INPUT",\n    OUTPUT = "OUTPUT"\n}\n')),(0,a.kt)("p",null,"Used to determine if a Io Port is a ",(0,a.kt)("inlineCode",{parentName:"p"},"input")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"output"),"."),(0,a.kt)("h2",{id:"con_mapping"},(0,a.kt)("inlineCode",{parentName:"h2"},"CON_MAPPING"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'enum CON_MAPPING {\n    SINGLE = "SINGLE",\n    MULTI = "MULTI"\n}\n')),(0,a.kt)("p",null,"Defines how many connection a ",(0,a.kt)("a",{parentName:"p",href:"#engineio"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineIO"))," can have."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SINGLE"),":  Only allows one connection to another IO Port. Usually used for ",(0,a.kt)("inlineCode",{parentName:"p"},"\xecnput")," type io's."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MULTI"),":  Allows unlimited connections to other IO Port's. Usually used for ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," type io's."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"While it is possible to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"MULTI")," mapping type an ",(0,a.kt)("inlineCode",{parentName:"p"},"input")," type, it has no defined behavior. ")))}s.isMDXComponent=!0}}]);