"use strict";(self.webpackChunkgraph_exe=self.webpackChunkgraph_exe||[]).push([[789],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>s});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=o.createContext({}),l=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=l(e.components);return o.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(t),s=a,g=m["".concat(d,".").concat(s)]||m[s]||u[s]||i;return t?o.createElement(g,r(r({ref:n},c),{},{components:t})):o.createElement(g,r({ref:n},c))}));function s(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=m;var p={};for(var d in n)hasOwnProperty.call(n,d)&&(p[d]=n[d]);p.originalType=e,p.mdxType="string"==typeof e?e:a,r[1]=p;for(var l=2;l<i;l++)r[l]=t[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9945:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const i={},r="NodeTypes",p={unversionedId:"Documentation/NodeTypes",id:"Documentation/NodeTypes",title:"NodeTypes",description:"ConfigNode:",source:"@site/docs/Documentation/NodeTypes.md",sourceDirName:"Documentation",slug:"/Documentation/NodeTypes",permalink:"/graph.exe-core/Documentation/NodeTypes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Documentation/NodeTypes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/graph.exe-core/Documentation/functions"},next:{title:"IO & connection types",permalink:"/graph.exe-core/Documentation/connectionTypes"}},d={},l=[{value:"<code>ConfigNode</code>:",id:"confignode",level:2},{value:"<code>ConfogNodeDict</code>:",id:"confognodedict",level:2},{value:"<code>EngineNode</code>:",id:"enginenode",level:2},{value:"<code>EngineNodeDict</code>:",id:"enginenodedict",level:2},{value:"<code>updateType</code>:",id:"updatetype",level:2}],c={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nodetypes"},"NodeTypes"),(0,a.kt)("h2",{id:"confignode"},(0,a.kt)("inlineCode",{parentName:"h2"},"ConfigNode"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface ConfigNode {\n    id: string;\n    isTrigger?: boolean;\n    updateType?: updateType;\n    inputs: EngineIO<any, any>[],\n    outputs: EngineIO<any, any>[],\n    exe: (...io: EngineIO<any, any>[]) => void;\n    onInit?: (...io: EngineIO<any, any>[]) => void;\n    onDestroy?: (...io: EngineIO<any, any>[]) => void;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"id"),": Unique id of the configNode."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"isTrigger"),": If true, the node will trigger ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/functions#next"},(0,a.kt)("inlineCode",{parentName:"a"},"next()"))," action upon being requested as a dependency. Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"updateType"),": The ",(0,a.kt)("a",{parentName:"p",href:"#updatetype"},(0,a.kt)("inlineCode",{parentName:"a"},"updateType"))," of the Node. Determines how the node handles being requested as a dependency. Default: `updateType.NEVER"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"inputs"),": The ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/connectionTypes#engineio"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineIO"))," inputs of this node."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"outputs"),": The ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/connectionTypes#engineio"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineIO"))," outputs of this node."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"exe"),": The executable function this node should trigger when computed."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onInit"),": Method triggered once before execution if the graph."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onDestroy"),": Method triggered once before destruction of the graph. "),(0,a.kt)("h2",{id:"confognodedict"},(0,a.kt)("inlineCode",{parentName:"h2"},"ConfogNodeDict"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface ConfigNodeDict {\n    [k: string]: ConfigNode;\n}\n")),(0,a.kt)("p",null,"Dict to handle ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/NodeTypes#confignode"},(0,a.kt)("inlineCode",{parentName:"a"},"ConfigNodes")),", used by a graph to execute node behavior."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The key of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ConfogNodeDict")," needs to be equal to the given ",(0,a.kt)("inlineCode",{parentName:"p"},"ConfigNodes"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),".")),(0,a.kt)("h2",{id:"enginenode"},(0,a.kt)("inlineCode",{parentName:"h2"},"EngineNode"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface EngineNode {\n    id: string;\n    configId: string;\n    updateType: updateType;\n    inputs: EngineIO<any, any>[];\n    outputs: EngineIO<any, any>[];\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"id"),": Unique id of the ",(0,a.kt)("inlineCode",{parentName:"p"},"EngineNode"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"configId"),": Unique id of the ",(0,a.kt)("a",{parentName:"p",href:"#confignode"},(0,a.kt)("inlineCode",{parentName:"a"},"ConfigNode"))," this node inherits behavior from."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"updateType"),": Inherited from ",(0,a.kt)("a",{parentName:"p",href:"#confignode"},(0,a.kt)("inlineCode",{parentName:"a"},"ConfigNode")),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"inputs"),": Inherited from ",(0,a.kt)("a",{parentName:"p",href:"#confignode"},(0,a.kt)("inlineCode",{parentName:"a"},"ConfigNode")),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"output"),": Inherited from ",(0,a.kt)("a",{parentName:"p",href:"#confignode"},(0,a.kt)("inlineCode",{parentName:"a"},"ConfigNode")),"."),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"When creating a ",(0,a.kt)("inlineCode",{parentName:"p"},"EngineNode")," it is important that the ",(0,a.kt)("inlineCode",{parentName:"p"},"input")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," are new Objects!\nIt is recommended to use the ",(0,a.kt)("a",{parentName:"p",href:"/graph.exe-core/Documentation/functions#nodebuilder"},(0,a.kt)("inlineCode",{parentName:"a"},"nodeBuilder()"))," function.")),(0,a.kt)("h2",{id:"enginenodedict"},(0,a.kt)("inlineCode",{parentName:"h2"},"EngineNodeDict"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface EngineNodeDict {\n    [k: string]: EngineNode;\n}\n")),(0,a.kt)("p",null,"Dict to handle ",(0,a.kt)("a",{parentName:"p",href:"#enginenode"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineNode")),", used by a graph to track nodes."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The key need to be the id of the ",(0,a.kt)("a",{parentName:"p",href:"#enginenode"},(0,a.kt)("inlineCode",{parentName:"a"},"EngineNode")),"!")),(0,a.kt)("h2",{id:"updatetype"},(0,a.kt)("inlineCode",{parentName:"h2"},"updateType"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"enum updateType {\n    NEVER,\n    DYNAMIC,\n    ALWAYS\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"NEVER"),": Node will only compute once upon initial dependency request."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"DYNAMIC"),": Node will only compute upon initial dependency request or when the Node's input values have changed."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ALWAYS"),": Node will always recompute upon dependency request."))}u.isMDXComponent=!0}}]);